version: '3.5'

networks:
  power-stack-net:
    external: true

secrets:
  gitlab_root_password:
    file: ./admin_pwd.txt
  gitlab_runner_reg_token:
    file: ./runner_reg_token.txt
  gitlab_runner_personal_access_token:
    file: ./gitlab_access_token.txt
  
volumes:
  gitlab_data:
  gitlab_conf:
  

services:
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    networks:
      - power-stack-net   
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://${GITLAB_UI_DOMAIN}'
        gitlab_rails['gitlab_shell_ssh_port'] = 8022
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['proxy_set_headers'] = {
          "X-Forwarded-Proto" => "https",
          "X-Forwarded-Ssl" => "on"
        }
    secrets:
      - gitlab_root_password
    volumes:
      - gitlab_data:/var/opt/gitlab
      - gitlab_conf:/etc/gitlab
    deploy:
      restart_policy: 
        condition: on-failure
        delay: 5s
      labels: 
        - "traefik.enable=true"
        - "traefik.http.services.gitlab_web.loadbalancer.server.port=80"
        - "traefik.http.routers.gitlab_web.rule=Host(`${GITLAB_UI_DOMAIN}`)"
        - "traefik.http.routers.gitlab_web.entrypoints=https"
        - "traefik.http.routers.gitlab_web.tls.certresolver=letsencrypt"
        - "traefik.http.routers.gitlab_web.tls=true"
        - "traefik.http.routers.gitlab_web.service=gitlab_web"

        # gitalb ssh in port is 22 but will be bound to traefik port 8022
        # traefik cannot use 22 otherwise I will not be able access the VM
        - "traefik.tcp.services.gitlab_ssh.loadbalancer.server.port=22"
        - "traefik.tcp.routers.gitlab_ssh.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.gitlab_ssh.entrypoints=ssh_gitlab"
        - "traefik.tcp.routers.gitlab_ssh.tls.certresolver=letsencrypt"
        - "traefik.tcp.routers.gitlab_ssh.tls=true"
        - "traefik.tcp.routers.gitlab_ssh.service=gitlab_ssh"
    logging:
      driver: json-file
      options: 
        max-size: 2m

# setup a gitlab runner, see here: https://gist.github.com/MetalArend/38db0f86f71a220d101f2a5ae49fc78c        
  runner:
    image: gitlab/gitlab-runner:latest
    environment:
      - CONCURRENT=8
      - REGISTER_LOCKED=1
      - REGISTER_NON_INTERACTIVE=1
      - RUNNER_EXECUTOR=docker
      - DOCKER_IMAGE=docker
      - DOCKER_VOLUMES=/var/run/docker.sock:/var/run/docker.sock
      - RUNNER_NAME=docker
      - API_URL=https://${GITLAB_UI_DOMAIN}/api/v4
      - CI_SERVER_URL=https://${GITLAB_UI_DOMAIN}/ci
    entrypoint: "bash"
    secrets:
      - gitlab_runner_reg_token
    command: |
      -c '
        set -e
        printf "Setting configuration...\\n"
        export REGISTRATION_TOKEN="$$(cat /run/secrets/gitlab_runner_reg_token)"
        sed -i "s/^concurrent = .*/concurrent = $${CONCURRENT}/" /etc/gitlab-runner/config.toml
        printf "\\n"
        printf "Registering runner...\\n"
        gitlab-runner register --non-interactive
        printf "\\n"
        printf "List runners...\\n"
        gitlab-runner list
        printf "\\n"
        printf "Running runner...\\n"
        gitlab-runner run --user=gitlab-runner --working-directory=/home/gitlab-runner --metrics-server=:9252
      '
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "gitlab-runner verify --name docker 2>&1 | grep --quiet \"is alive\""]
      start_period: 10s
      interval: 60s
      timeout: 10s
      retries: 10

  # Gitlab Manager to unregister GitLab Runners
  manager:
    image: alpine:latest
    environment:
      - API_URL=https://${GITLAB_UI_DOMAIN}/api/v4
      - CI_SERVER_URL=https://${GITLAB_UI_DOMAIN}/ci
    secrets:
      - gitlab_runner_personal_access_token
    entrypoint: sh
    command: |
      -c '
        set -e
        printf "Installing dependencies...\\n"
        apk --no-cache add curl jq
        printf "\\n"
        export PERSONAL_ACCESS_TOKEN="$$(cat /run/secrets/gitlab_runner_personal_access_token)"
        while true; do
          printf "Checking runners...\\n"
          curl -sS --header "PRIVATE-TOKEN: $${PERSONAL_ACCESS_TOKEN}" "$${API_URL}/runners?per_page=100" | \
          jq -c ".[] | select(false==.is_shared) | select(\"online\"==.status) | .id" | \
          while read RUNNER_ID; do
            printf "Runner $${RUNNER_ID} is online\\n"
          done
          curl -sS --header "PRIVATE-TOKEN: $${PERSONAL_ACCESS_TOKEN}" "$${API_URL}/runners?per_page=100" | \
          jq -c ".[] | select(false==.is_shared) | select(\"online\"!=.status) | .id" | \
          while read RUNNER_ID; do
            printf "Deleting runner $${RUNNER_ID}...\\n"
            curl -sS --request DELETE --header "PRIVATE-TOKEN: $${PERSONAL_ACCESS_TOKEN}" "$${API_URL}/runners/$${RUNNER_ID}"
          done
          printf "All offline runners deleted\\n"
          printf "Waiting for 24 hours...\\n"
          sleep 24h
        done
        printf "\\n"
      '
    healthcheck:
      test: ["CMD-SHELL", "command -v curl"]
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 10

  # Gitlab Runner Docker Cleanup - https://gitlab.com/gitlab-org/gitlab-runner-docker-cleanup
  cleaner:
    image: quay.io/gitlab/gitlab-runner-docker-cleanup
    environment:
      - CHECK_PATH=/data
      - LOW_FREE_SPACE=10G
      - EXPECTED_FREE_SPACE=20G
      - LOW_FREE_FILES_COUNT=1048576
      - EXPECTED_FREE_FILES_COUNT=2097152
      - USE_DF=1
      - CHECK_INTERVAL=10s
      - RETRY_INTERVAL=30s
      - DEFAULT_TTL=60m
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data:/data
    deploy:
      restart_policy:
        condition: any

